import axios from "axios";
import { saveTokens, getAccessToken, getRefreshToken, clearStorage } from "./storage.js";

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export async function refreshToken() {
  try {
    const refreshToken = getRefreshToken();
console.log("refresh token from cookies:", refreshToken); // üîç –ø–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ —Ç—É—Ç
if (!refreshToken) throw new Error("Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

    const response = await axios.post(
      "http://127.0.0.1:8000/api/users/token/refresh/",
      { refresh: refreshToken }
    );

    const newAccessToken = response.data.access;
    saveTokens(newAccessToken, refreshToken); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω

    console.log("Access token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", newAccessToken);
    return newAccessToken;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
    clearStorage(); // –ß–∏—Å—Ç–∏–º —Ç–æ–∫–µ–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ –±—É–¥—É—â–µ–º
    return null;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π access-—Ç–æ–∫–µ–Ω
export async function fetchAccessToken() {
  let access_token = getAccessToken();

  if (!access_token) {
    console.warn("Access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...");
    access_token = await refreshToken(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    if (!access_token) {
      console.error("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.");
      return null;
    }
  }

  try {
    // ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–∫–µ–Ω–∞
    const parts = access_token.split("."); // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è access_token
    if (parts.length !== 3) throw new Error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞");

    const tokenPayload = JSON.parse(atob(parts[1]));
    const tokenExp = tokenPayload.exp;
    const currentTime = Math.floor(Date.now() / 1000);

    if (currentTime >= tokenExp) {
      console.log("Access token –∏—Å—Ç—ë–∫. –û–±–Ω–æ–≤–ª—è–µ–º...");
      access_token = await refreshToken(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º access_token, –∞ –Ω–µ token
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    return null;
  }

  return access_token; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π access_token
}