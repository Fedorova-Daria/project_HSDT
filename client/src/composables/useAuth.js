import api from "@/api/axiosInstance.js";
import { saveTokens, saveUserData, clearStorage } from "@/api/storage.js";
import axios from "axios";
export function useAuth() {
   // üîê –õ–æ–≥–∏–Ω
   const login = async (email, password) => {
    try {
      clearStorage();  // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º
  
      const response = await axios.post("http://127.0.0.1:8000/api/users/login/", {
        email,
        password,
      });
  
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const { access_token, refresh_token } = response.data;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
      saveTokens(access_token, refresh_token);
  
      // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω
      const userDataResponse = await axios.get("http://127.0.0.1:8000/api/users/me/", {
        headers: {
          Authorization: `Bearer ${access_token}`, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –æ—Ç–≤–µ—Ç–∞
        },
      });
  
      const userData = userDataResponse.data;
      saveUserData(userData);
  
      return {
        access: access_token,
        ...userData,
      };
    } catch (error) {
      const message = error.response?.data?.message;
      if (message === "Invalid credentials") throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
      if (message === "Email not found") throw new Error("Email –Ω–µ –Ω–∞–π–¥–µ–Ω");
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
    }
  };

  // üë®‚Äçüéì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  const registerStudent = async ({
    first_name,
    last_name,
    group,
    email,
    password,
    role = "ST",
  }) => {
    const data = {
      first_name,
      last_name,
      group,
      email,
      password,
      role,
    };

    try {
      await api.post("/users/registration/", data);
      router.push("/login");
    } catch (error) {
      if (error.response?.data?.email) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      }
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞");
    }
  };

  // üßë‚Äçüíº –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
  const registerCustomer = async ({
    first_name,
    last_name,
    company,
    email,
    password,
    role = "CU",
  }) => {
    const data = {
      first_name,
      last_name,
      company,
      email,
      password,
      role,
    };

    try {
      await api.post("/users/registration/", data);
      router.push("/login");
    } catch (error) {
      if (error.response?.data?.email) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      }
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞");
    }
  };

  return {
    login,
    registerStudent,
    registerCustomer,
  };
}
